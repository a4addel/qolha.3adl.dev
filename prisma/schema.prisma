// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



model User {
    id            String    @unique @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    code          String?
    role          Role    @default(user)
    country       String?
    last_login DateTime? @default(now())
    Region String?
    Real_name String? 
    Website String? 
    Language_skills String? 

    Personal_information String? 
    Business_information String? 
    Contact_information String? 


    account      Account?
    words        Word[]
    socialMedia  SocialMedia[]
    clips        Clip[]
    rates        Rate[]
    reports      WordReport[]
    clip_reports ClipReport[]
    Session      Session[]
    searchHistory wordPopularity[]
    banned DateTime?
    wordsApproved WordApproval[]
    @@index([email, role])
}


model WordApproval {
    id String @default(uuid()) @unique
    wordId String @unique
    word Word @relation(references: [id], fields: [wordId])

    userId String
    user User @relation(references: [id], fields: [userId])

}


 
enum Role {
    owner
    admin
    user
}

model wordPopularity {
    id String @default(uuid()) @unique
    userId String?
    user User? @relation(references: [id], fields: [userId])
    wordId String
    word Word @relation(references: [id],fields: [wordId])
    date DateTime @default(now())
}

model Account {
    id String @unique @default(uuid())

    userId String @unique

    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    password          String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Word {
    ar             String @unique
    id             String       @unique @default(uuid())
    
    description_ar String
    description_en String
    userId         String?
    user           User?        @relation(references: [id], fields: [userId])
    clips          Clip[]
    reports        ClipReport[]
    WordReport     WordReport[]
    wordView       WordView[]
    wordPopularity wordPopularity[]
    approval WordApproval?

    @@index([userId, ar])
}

model Clip {
    id       String  @unique @default(uuid())
    clipName String
    accept   Boolean @default(false)
    reject   Boolean @default(false)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    word   Word   @relation(fields: [wordId], references: [id])
    wordId String

    reports ClipReport[]
    rates   Rate[]

    @@index([userId, wordId])
}

model WordView {
    id     String   @id @default(uuid())
    wordID String
    word   Word     @relation(fields: [wordID], references: [id])
    day    DateTime @default(now())

    @@index([day, wordID])
}

model Rate {
    id   String @unique @default(uuid())
    rate String

    clipId String
    clip   Clip   @relation(fields: [clipId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@unique([clipId, userId])
    @@index([clipId, userId])
}

model WordReport {
    id     String  @unique @default(uuid())
    word   Word    @relation(fields: [wordId], references: [id])
    wordId String
    reason String
    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@index([userId, wordId])
}

model ClipReport {
    id     String  @unique @default(uuid())
    clip   Clip    @relation(fields: [clipId], references: [id])
    clipId String
    reason String
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
    Word   Word?   @relation(fields: [wordId], references: [id])
    wordId String?

    @@index([userId, clipId, wordId])
}

model SocialMedia {
    id       String @unique @default(uuid())
    userId   String
    user     User   @relation(references: [id], fields: [userId])
    site     String @default("TW")
    username String

    @@index([userId])
}

// enum Number {

// }

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
